{
    "variables": {
        "client_id": "",
        "client_secret": "",
        "tenant_id": "",
        "subscription_id": ""
    },
    
    "builders": [{
      "type": "azure-arm",
  
      "client_id": "{{user `client_id`}}",
      "client_secret": "{{user `client_secret`}}",
      "tenant_id": "{{user `tenant_id`}}",
      "subscription_id": "{{user `subscription_id`}}",
  
      "managed_image_resource_group_name": "HQ-MGMT",
      "managed_image_name": "base-windows-hq",
  
      "os_type": "Windows",
      "image_publisher": "MicrosoftWindowsServer",
      "image_offer": "WindowsServer",
      "image_sku": "2016-Datacenter",
  
      "communicator": "winrm",
      "winrm_use_ssl": true,
      "winrm_insecure": true,
      "winrm_timeout": "5m",
      "winrm_username": "packer",
  
      "azure_tags": {
          "environment": "MGMT",
          "project": "HQ",
          "live": "yes",
          "owner": "Paul Campbell",
          "costcentre": "PD6727"
      },
  
      "location": "North Europe",
      "vm_size": "Standard_DS2_v2"
    }],
    
    "provisioners": [{
        "type": "powershell",
        "inline": [
            "echo '>>> Waiting for GA to start ...'",
            "while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
            "while ((Get-Service WindowsAzureTelemetryService).Status -ne 'Running') { Start-Sleep -s 5 }",
            "while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
            "pwd",
            "ls",
            "echo '>>> Sysprepping VM ...'",
            "if( Test-Path $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml ){ rm $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml -Force}",
            "& $Env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit",
            "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 5  } else { break } }"
        ]
    }
]
}